import datetime as dt
import json
import csv
import locale as loc
import os
import platform
import bot_users_db as bu
import sqlalchemy as sql
import sqlalchemy.orm as sqlorm

import telegram
from telegram import *
from telegram.ext import *


# region –ö–ª–∞—Å—Å—ã
class ChatBot:
    __doc__ = """1"""
    qnty_users = 0

    def __init__(self, update, context):
        ChatBot.qnty_users += 1
        self.chat_id = update.effective_chat.id
        self.update = update
        self.context = context
        # self.users = UsersList(update)
        self.remove_reply_keyboard = False

        self.options = load_json('options.json')
        self.hookahs = load_json('–∑–∞–≤–µ–¥–µ–Ω–∏—è.json')

        self.side = ''
        self.white = '0'
        self.mode = 0
        self.when = ''
        self.datetime = dt.datetime.today()
        self.markup = ''
        self.qnty = 0

        self.booking = False
        self.user_name = ''
        self.phone_number = ''

        self.complain = False
        self.complain_text = ''

        self.spam = False
        self.spam_text = ''

        self.menu_level = 0
        self.messages = []
        self.booking_receivers = self.options['–°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–µ–∑–µ—Ä–≤–µ']
        self.complain_receivers = self.options['–°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∂–∞–ª–æ–±–µ']
        self.admins = self.options['–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤']
        self.admins = [int(i) for i in self.admins]

    def send(self, text=None, photo=None, markup=False):
        __doc__ = """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ñ–æ—Ç–æ –∏ inline-–∫–Ω–æ–ø–∫–∞–º–∏
        –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
        photo: –∏–º—è —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–∫–∏ –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
        markup: —Ç—ç–≥ —Å —Ç–µ–∫—Å—Ç–æ–≤–æ–π –º–µ—Ç–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç–∞ inline-–∫–Ω–æ–ø–æ–∫ (—Ç—ç–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ create_inlinne_buttons)
        """
        context = self.context

        if photo is not None:
            if os.path.isfile(photo):
                message_id = context.bot.send_photo(self.chat_id, photo=open(photo, 'rb'), timeout=30).message_id
                self.add_message(message_id)
        if text is not None:
            if markup:
                self.create_menu_markup_buttons()
                message_id = context.bot.send_message(self.chat_id, text=text, reply_markup=self.markup).message_id
            else:
                message_id = context.bot.send_message(self.chat_id, text=text).message_id
            self.add_message(message_id)
            pass

    def create_time_buttons_markup(self):
        self.__doc__ = """–°–æ–∑–¥–∞—ë—Ç inline-–∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
        1) –∫–Ω–æ–ø–∫–∏ –≤—ã–≤–æ–¥—è—Ç—Å—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–æ–∫, –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞–µ—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π buttons_in_row
        2) –Ω–∞—á–∞–ª—å–Ω–æ–µ –∏ –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∑–∞–≤–µ–¥–µ–Ω–∏—è, –±–µ—Ä—É—Ç—Å—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        3) –µ—Å–ª–∏ –¥–∞—Ç–∞ = —Å–µ–≥–æ–¥–Ω—è:
            –∞) –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞ –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è = —Ç–µ–∫—É—â–∏–π —á–∞—Å + 1, –∫–æ–Ω–µ—á–Ω–æ - –∑–∞ —á–∞—Å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∑–∞–≤–µ–¥–µ–Ω–∏—è
            –±) –¥–ª—è –∂–∞–ª–æ–±—ã –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è = –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∑–∞–≤–µ–¥–µ–Ω–∏—è, –∫–æ–Ω–µ—á–Ω–æ–µ - —Ç–µ–∫—É—â–∏–π —á–∞—Å –º–∏–Ω—É—Å 1 
        """
        if not self.white:
            self.greating()
        bottons_in_row = 3

        open_time = self.hookahs[self.white]['–û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è']
        close_time = self.hookahs[self.white]['–ó–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è']

        start_time = 0
        stop_time = close_time

        if self.when == 'Today':
            if self.complain:
                start_time = open_time
                stop_time = dt.datetime.now().hour
            else:
                start_time = dt.datetime.now().hour
        else:
            stop_time = close_time

        if self.when == 'Yesterday':
            start_time = open_time
        if start_time < open_time:
            start_time = open_time
        else:
            if self.booking:
                start_time += 1
            else:
                if start_time == stop_time:
                    stop_time += 1

        buttons_text = []
        buttons = []
        buttons_row = []
        for i in range(start_time, stop_time, 1):
            buttons_text.append((i, f'{i}:00'))

        for i in range(len(buttons_text)):
            if i % bottons_in_row == 0 and i > 0:
                buttons.append(buttons_row)
                buttons_row = []
            –≤—Ä–µ–º—è = buttons_text[i][0]
            buttons_row.append(InlineKeyboardButton(text=buttons_text[i][1], callback_data=f'Button_time{–≤—Ä–µ–º—è}'))
        buttons.append(buttons_row)
        if start_time > stop_time:
            return False
        self.markup = InlineKeyboardMarkup(buttons).to_json()
        return True

    def greating(self):
        self.send(photo=r'Data' '\\' + self.options['–ò–º—è —Ñ–∞–π–ª–∞ –æ–±—â–µ–π –∑–∞—Å—Ç–∞–≤–∫–∏'])
        try:
            user_name = self.update.effective_user.full_name
        except ValueError or KeyError:
            user_name = ''
        if self.remove_reply_keyboard:
            markup = ReplyKeyboardRemove()
            message_id = self.context.bot.send_message(self.chat_id, text='', reply_markup=markup).message_id
            self.add_message(message_id)
        self.send(text=self.options['–û–±—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ 1'].format(user_name=user_name))
        self.send(text=self.options['–û–±—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ 2'], markup=True)

    def delete_messages(self):
        if not self.messages:  # –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å
            return
        for i in self.messages:
            try:
                self.context.bot.delete_message(self.chat_id, message_id=i)
            except TelegramError:
                pass
        self.messages = []

    def add_message(self, message_id):
        self.messages.append(message_id)

    def create_menu_markup_buttons(self):
        if self.menu_level == 0:
            l1 = []
            button1 = InlineKeyboardButton(text='üìç –õ—ñ–≤–∏–π –±–µ—Ä–µ–≥', callback_data='–õ—ñ–≤–∏–π –±–µ—Ä–µ–≥')
            button2 = InlineKeyboardButton(text='üìç –ü—Ä–∞–≤–∏–π –±–µ—Ä–µ–≥', callback_data='–ü—Ä–∞–≤–∏–π –±–µ—Ä–µ–≥')
            l1.append([button1, button2])
            if self.chat_id in self.admins:
                button3 = InlineKeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫', callback_data='Get file')
                button4 = InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å—á–∏–∫–∏', callback_data='Get followers')
                button5 = InlineKeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞', callback_data='Spam')
                l1.append([button3])
                l1.append([button4])
                l1.append([button5])
            self.markup = InlineKeyboardMarkup(l1)
        elif self.menu_level == 1:
            d = self.hookahs
            hookah_list = []
            for i, v in d.items():
                if v['–ë–µ—Ä–µ–≥ –ö–∏–µ–≤–∞'] == self.side:
                    s = v['–ù–∞–∑–≤–∞–Ω–∏–µ']
                    hookah_list.append([InlineKeyboardButton(text=s, callback_data='White ' + i)])
            b = InlineKeyboardButton(text='üîô–ù–∞–∑–∞–¥', callback_data='–í—Å—ñ –∑–∞–∫–ª–∞–¥–∏')
            hookah_list.append([b])
            self.markup = InlineKeyboardMarkup(hookah_list)
        elif self.menu_level == 2:
            d = self.hookahs[self.white]
            s = self.white

            button1 = InlineKeyboardButton(text='üçΩÔ∏è –ú–µ–Ω—é', url=d['–ú–µ–Ω—é —Å—Å—ã–ª–∫–∞'])
            button2 = InlineKeyboardButton(text='‚è∞ –°—Ç–æ–ª–∏–∫', callback_data='–ó–∞–±—É–∫–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫')
            button3 = InlineKeyboardButton(text='üì∑ –§–æ—Ç–∫–∏ –∑–∞–∫–ª–∞–¥—É', callback_data='–§–æ—Ç–∫–∏ –∑–∞–∫–ª–∞–¥—É' + s)
            button4 = InlineKeyboardButton(text='üìç –ú–∞—Ä—à—Ä—É—Ç', url=d['–ú–∞—Ä—à—Ä—É—Ç —Å—Å—ã–ª–∫–∞'])
            button5 = InlineKeyboardButton(text='üéÅ –ê–∫—Ü—ñ—ó', callback_data='–ê–∫—Ü—ñ—ó')
            button6 = InlineKeyboardButton(text='üìû –ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏', callback_data='–ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏')
            button7 = InlineKeyboardButton(text='üé∞ üëï –ú–µ—Ä—á', url='https://letshook.com.ua/merch')
            button8 = InlineKeyboardButton(text='üåê –ü–∞—Ä–æ–ª—å –≤—ñ–¥ wi-fi', callback_data='wi-fi')
            button9 = InlineKeyboardButton(text='‚úèÔ∏è–ü–æ—Ö–≤–∞–ª–∏—Ç–∏', url=d['–û—Ç–∑—ã–≤ —Å—Å—ã–ª–∫–∞'])
            button10 = InlineKeyboardButton(text='ü§¨ –ü–æ—Å–∫–∞—Ä–∂–∏—Ç–∏—Å—å', callback_data='–ü–æ—Å–∫–∞—Ä–∂–∏—Ç–∏—Å—å')
            if self.side == "–ü—Ä–∞–≤—ã–π":
                button11 = InlineKeyboardButton(text='üîô–ù–∞–∑–∞–¥', callback_data='–ü—Ä–∞–≤–∏–π –±–µ—Ä–µ–≥')
            else:
                button11 = InlineKeyboardButton(text='üîô–ù–∞–∑–∞–¥', callback_data='–õ—ñ–≤–∏–π –±–µ—Ä–µ–≥')

            self.markup = InlineKeyboardMarkup([[button1, button2],
                                                [button3, button4],
                                                [button5, button6],
                                                [button7, button8],
                                                [button9, button10],
                                                [button11]])
        elif self.menu_level == 3:
            if self.mode == 1:  # –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                button1 = InlineKeyboardButton(text="–¢–∞–∫, —Ü–µ —è",
                                               callback_data='–¢–∞–∫, —Ü–µ —è')
                button2 = InlineKeyboardButton(text='–ù—ñ, –∑–∞—Ä–∞–∑ –Ω–∞–ø–∏—à—É',
                                               callback_data='–ù—ñ, –∑–∞—Ä–∞–∑ –Ω–∞–ø–∏—à—É')
                self.markup = InlineKeyboardMarkup([[button1, button2]])
            elif self.mode == 2:  # –¥–∞—Ç–∞
                self.create_dates_buttons()
            elif self.mode == 3:  # –≤—Ä–µ–º—è
                self.create_time_buttons_markup()
            elif self.mode == 4:
                pass
            elif self.mode == 5:  # –∑–∞–ø—Ä–æ—Å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
                button1 = KeyboardButton(text="–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º", request_contact=True)
                buttons = [button1]
                if self.complain:
                    button2 = KeyboardButton(text="–ó–∞–ª–∏—à–∏—Ç–∏—Å—å –∞–Ω–æ–Ω—ñ–º–æ–º")
                    buttons.append(button2)
                self.markup = ReplyKeyboardMarkup(resize_keyboard=True,
                                                  keyboard=[buttons],
                                                  one_time_keyboard=True,
                                                  input_field_placeholder='')

            elif self.mode == 6:  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏
                button1 = InlineKeyboardButton(text="–¢–∞–∫",
                                               callback_data='–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ')
                button2 = InlineKeyboardButton(text="–í—ñ–¥–º–æ–≤–∞",
                                               callback_data='–í—Å—ñ –∑–∞–∫–ª–∞–¥–∏')
                self.markup = InlineKeyboardMarkup([[button1], [button2]])
            else:
                button1 = InlineKeyboardButton(text='üîô–ù–∞–∑–∞–¥', callback_data='White ' + self.white)
                self.markup = InlineKeyboardMarkup([[button1]])

    def show_photos(self):
        self.menu_level = 3
        for i in range(1, 7):
            catalog = r'Data\White' + self.white
            file_name = catalog + fr'\White{i}.jpeg'
            if os.path.isfile(file_name):
                self.send(photo=file_name)
        text = '–û—Å—å –¥–µ–∫—ñ–ª—å–∫–∞ —Ñ–æ—Ç–æ–∫, –±—ñ–ª—å—à–µ –º–æ–∂–µ—à –∑–Ω–∞–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç—ñ www.letshook.com.ua'
        self.send(text=text, markup=True)

    def notify_about_event(self):
        white = self.white
        –¥–∞—Ç–∞_–∏_–≤—Ä–µ–º—è = dt.datetime.strftime(self.datetime, '%H:%M, %A %d %B')
        if self.booking:
            event = '–†–µ–∑–µ—Ä–≤'
        else:
            event = '–ñ–∞–ª–æ–±–∞'
        if event == "–ñ–∞–ª–æ–±–∞":
            event += ':\n' + self.complain_text

        text = ''
        if test_mode:
            text += '===–≠—Ç–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ===\n'
        text += f'–°–æ–±—ã—Ç–∏–µ: {event}.\n' \
                f'White ‚Ññ {white}\n\n' \
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {self.phone_number if self.phone_number else '–ê–Ω–æ–Ω—ñ–º'}\n\n" \
                f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è: {–¥–∞—Ç–∞_–∏_–≤—Ä–µ–º—è}\n'
        if self.user_name:
            text += f'–ò–º—è: {self.user_name}\n'
        if self.user_name:
            text += f'–ö-–≤–æ –≥–æ—Å—Ç–µ–π: {self.qnty}\n'
        for i in self.booking_receivers if self.booking else self.complain_receivers:
            self.context.bot.send_message(i, text=text)
        log = Log(self)
        text = text.replace('\n', '')
        log.set(self.context, action_type=2, action=f'{event}: {text}')

        self.mode = 0
        self.booking = False
        self.complain = False
        self.greating()

    def booking_approval(self, finaly=False):
        if finaly:
            text = '–î—è–∫—É—é!\n–ù–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –º–∏ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É—î–º–æ —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ç–≤–æ—î –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è'
            self.menu_level = 0
            self.mode = 0
            self.send(text=text, markup=True)
            self.notify_about_event()
            return
        –¥–∞—Ç–∞_–∏_–≤—Ä–µ–º—è = dt.datetime.strftime(self.datetime, '%H:%M, %A %d %B')
        –∏–º—è = self.user_name
        –∫–≤–æ_–≥–æ—Å—Ç–µ–π = self.qnty
        —Ç–µ–ª–µ—Ñ–æ–Ω = self.phone_number
        text = f"""–ü—ñ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:
White {self.white}
{–¥–∞—Ç–∞_–∏_–≤—Ä–µ–º—è},
—ñ–º'—è: {–∏–º—è}\n–≥–æ—Å—Ç–µ–π: {–∫–≤–æ_–≥–æ—Å—Ç–µ–π}\n—Ç–µ–ª–µ—Ñ–æ–Ω:{—Ç–µ–ª–µ—Ñ–æ–Ω}?"""
        self.mode = 6
        self.send(text=text, markup=True)

    def create_dates_buttons(self):
        loc.setlocale(loc.LC_ALL, "ukr_UKR")
        f_str = '%A %d %B %Y'

        today = dt.datetime.today()
        event = 'Booking' if self.booking else '–°omplaint'
        d = [(today + dt.timedelta(days=i)).strftime(f_str) for i in range(-1, 2)]

        days = [('Today', '–°—å–≥–æ–¥–Ω—ñ:', d[1]),
                ('Yesterday', '–í—á–æ—Ä–∞:', d[0]) if event == '–°omplaint' else ('Tomorrow', '–ó–∞–≤—Ç—Ä–∞', d[2]),
                ('OtherDate', '–Ü–Ω—à–∞ –¥–∞—Ç–∞', '')]

        buttons_list = []
        for when in days:
            button = InlineKeyboardButton(text=f"{when[1]} {when[2]}", callback_data=event + when[0])
            buttons_list.append([button])
        self.markup = InlineKeyboardMarkup(buttons_list)

    def set_date(self, get_text):
        format_strings = ['%d.%m.%y', '%d.%m.%Y', '%d/%m/%y', '%d/%m/%Y', '%d-%m-%y', '%d-%m-%Y']
        for f in format_strings:
            try:
                self.datetime = dt.datetime.strptime(get_text, f)
                break
            except ValueError:
                continue
        else:
            self.datetime = dt.datetime.today()

    def get_time(self):
        self.mode = 3

        if self.complain:
            text = '–í —è–∫–∏–π –ø—Ä–∏–±–ª–∏–∑–Ω–æ —á–∞—Å?'
        else:
            if not self.create_time_buttons_markup():
                text = '–ù–∞ –∂–∞–ª—å –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ —á–∞—Å—É –¥–ª—è —Ä–µ–∑–µ—Ä–≤—É –≤–∂–µ –Ω–µ–º–∞—î'
            else:
                text = '–ù–∞ —è–∫–∏–π —á–∞—Å'

        self.send(text=text, markup=True)

    def get_hookah_attr(self, attr_name):
        if self.white == '0':
            self.menu_level = 0
            self.greating()
            return
        return self.hookahs[self.white][attr_name]


class Log:
    """–§–∏–∫—Å–∞—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤ csv-—Ñ–∞–π–ª–µ"""

    def __init__(self, b):
        self.timestamp = str(dt.datetime.now())
        self.chat_id = b.update.effective_chat.id
        self.full_name = b.update.effective_chat.full_name
        self.white = b.white
        self.action_type = None
        self.action = None
        self.error = None

    def set(self, context, action_type, action, error=None):
        self.action_type = action_type
        self.action = action
        self.error = error
        filename = r'Data\log.csv'
        is_file = os.path.isfile(filename)
        with open(filename, 'a', encoding="utf-8", newline='') as __file:
            headers = ['timestamp', 'white', 'chat_id', 'full_name', 'action_type', 'action', 'error']
            __writer = csv.writer(__file, delimiter=';')
            parl = [self.timestamp, self.white, self.chat_id, self.full_name, self.action_type, self.action, self.error]
            if not is_file:
                __writer.writerow(headers)
            try:
                __writer.writerow(parl)
            except UnicodeEncodeError:
                context.bot.send_message(405329215, text=f'–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ csv: {parl}')
# endregion


# region initialization and others
def load_json(filename):
    full_path = fR"Data\{filename}"
    with open(full_path, 'rt', encoding='utf-8') as file:
        d = json.load(file)
    if '–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤' in d:
        d['–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤'] = [int(i) for i in d['–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤']]
    return d


def create_start():
    buttons = [KeyboardButton(text="/start")]
    return ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[buttons])


options = load_json('options.json')
tokens = load_json('tokens.json')

test_mode = platform.node() == 'Acer'
my_token = tokens['test'] if test_mode else tokens['main']
#  endregion


# region Handlers
def inlineKeyboard(update, context):
    try:
        b = context.user_data['bot']
    except KeyError:
        b = ChatBot(update, context)
        context.user_data['bot'] = b
    b.delete_messages()
    bot_user = context.user_data['bot_user']

    button_data = update.callback_query.data
    log = Log(b)
    log.set(context, action_type=1, action=button_data)
    if button_data == '–í—Å—ñ –∑–∞–∫–ª–∞–¥–∏':
        b.delete_messages()
        b.menu_level = 0
        b.greating()
    elif button_data == '–õ—ñ–≤–∏–π –±–µ—Ä–µ–≥':
        b.menu_level = 1
        b.side = '–õ–µ–≤—ã–π'
        b.send(text='–õ—ñ–≤–∏–π –±–µ—Ä–µ–≥', markup=True)
    elif button_data == '–ü—Ä–∞–≤–∏–π –±–µ—Ä–µ–≥':
        b.menu_level = 1
        b.side = '–ü—Ä–∞–≤—ã–π'
        b.send(text='–ü—Ä–∞–≤–∏–π –±–µ—Ä–µ–≥', markup=True)
    elif button_data[:5] == 'White':
        b.menu_level = 2
        b.white = button_data[6:]
        d = b.hookahs[b.white]
        b.send(text=None, photo=fr'Data\White{b.white}\mw1.jpg')
        b.send(text=d['–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'] + f"\n\n–ß–∞—Å —Ä–æ–±–æ—Ç–∏: –∑ {d['–û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è']} –¥–æ {d['–ó–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è']} \n\n")

        b.send(text='–©–æ —Å–∞–º–µ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å?', markup=True)
    elif button_data[:13] == '–§–æ—Ç–∫–∏ –∑–∞–∫–ª–∞–¥—É':
        b.white = button_data[13:]
        b.show_photos()
    elif button_data == '–ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏':
        b.menu_level = 3
        b.send(text='–©–æ–± –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏, –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –Ω–æ–º–µ—Ä.')
        b.send(text=b.get_hookah_attr('–¢–µ–ª–µ—Ñ–æ–Ω'), markup=True)
    elif button_data == 'Get file':
        if os.path.isfile(r'Data\log.csv'):
            context.bot.send_document(b.chat_id, open(r'Data\log.csv', 'rb'), timeout=30, reply_markup=create_start())
        else:
            b.send(text='–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ "options.json"', reply_markup=create_start())
        if os.path.isfile(r'Data\options.json'):
            context.bot.send_document(b.chat_id, open(r'Data\options.json', 'rb'), timeout=30, reply_markup=create_start())
        else:
            b.send(text='–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ "options.json"', reply_markup=create_start())
        if os.path.isfile(r'Data\–∑–∞–≤–µ–¥–µ–Ω–∏—è.json'):
            context.bot.send_document(b.chat_id, open(r'Data\–∑–∞–≤–µ–¥–µ–Ω–∏—è.json', 'rb'), timeout=30, reply_markup=create_start())
        else:
            b.send(text='–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–∞–π–ª —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∑–∞–≤–µ–¥–µ–Ω–∏–π "–∑–∞–≤–µ–¥–µ–Ω–∏—è.json"', reply_markup=create_start())
    elif button_data == 'Get followers':
        # try:
        #     users_list = b.users.users_list
        # except KeyError:
        #     users_list = UsersList(update).users_list
        s, er = bot_user.create_session()
        users_list = bu.User.get_users_list(s)

        s = ''
        for i, user in enumerate(users_list):
            phone = user.phone_number
            if phone:
                phone = f" {user.phone_number}, "
            if (i+1) % 50:
                s += f"{i+1}) {user.full_name}, {phone} —è–∑—ã–∫: {user.language_code}\n"
            else:
                context.bot.send_message(b.chat_id, text=s, timeout=30)
                s = ''
        if s:
            context.bot.send_message(b.chat_id, text=s, timeout=20)
    elif button_data[:15] == '–ó–∞–±—É–∫–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫':
        if len(button_data) > 15:
            b.white = button_data[15:]
        b.menu_level = 3
        b.booking = True
        b.mode = 1
        photo = 'White' + b.white + r'\mw1.jpg'
        text = f'–°—Ç–æ–ª–∏–∫ –Ω–∞ —Ç–≤–æ—î —ñ–º º—è {update.effective_chat.full_name}, –∞–±–æ –≤–≤–µ—Å—Ç–∏ —ñ–Ω—à–µ?'
        b.send(text=text, photo=photo, markup=True)
    elif button_data == '–¢–∞–∫, —Ü–µ —è' or button_data == '–ù—ñ, –∑–∞—Ä–∞–∑ –Ω–∞–ø–∏—à—É':
        if button_data == '–ù—ñ, –∑–∞—Ä–∞–∑ –Ω–∞–ø–∏—à—É':
            return
        b.user_name = update.effective_chat.full_name
        b.menu_level = 3
        b.mode = 2
        text = '–ù–∞ —è–∫—É –¥–∞—Ç—É –ø–æ—Ç—Ä—ñ–±–µ–Ω —Å—Ç–æ–ª–∏–∫?'
        b.send(text=text, markup=True)
    elif button_data == '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É —Ä–µ–∑–µ—Ä–≤–∞ —Å—Ç–æ–ª–∏–∫–∞':
        b.menu_level = 3
        b.mode = 3
    elif button_data[:7] == 'Booking' or button_data[:9] == '–°omplaint':
        if b.booking:
            b.when = button_data[7:]
        elif b.complain:
            b.when = button_data[9:]
        else:
            b.when = 'Today'

        if b.when == 'OtherDate':
            if b.booking:
                text = '–ù–∞ —è–∫—É –¥–∞—Ç—É –ø–æ—Ç—Ä—ñ–±–µ–Ω —Å—Ç–æ–ª–∏–∫? –ù–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ "21.08.22"'
            else:
                text = '–ö–æ–ª–∏ —Ç–∏ –≤ –Ω–∞—Å –±—É–≤?\n–û–±–µ—Ä–∏ –Ω–∞–π–±–ª–∏–∂—á—É –¥–∞—Ç—É, –∞–±–æ –Ω–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ "21.08.22"?'
            b.send(text=text)
            return

        days = 0
        if b.when == 'Tomorrow':
            days = 1
        elif b.when == 'Yesterday':
            days = -1
        b.datetime = dt.datetime.today().replace(hour=0, minute=0, second=0, microsecond=0) + dt.timedelta(days=days)
        b.get_time()
    elif button_data[:11] == 'Button_time':
        t = int(button_data[11:])
        b.datetime += dt.timedelta(hours=t)
        b.mode = 4
        if b.booking:
            text = '–ù–∞ —è–∫—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Å—ñ–±? –ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ–º'
        else:
            text = '–©–æ —Å–∞–º–µ —Å—Ç–∞–ª–æ—Å—å?'
        b.send(text=text)
    elif button_data == '–ü–æ—Å–∫–∞—Ä–∂–∏—Ç–∏—Å—å':
        text = '–ù–∞–º –¥—É–∂–µ –ø—Ä–∏–∫—Ä–æ —â–æ –º–∏ –∑–∞–ª–∏—à–∏–ª–∏ –ø—Ä–æ —Å–µ–±–µ –ø–æ–≥–∞–Ω—ñ –∑–≥–∞–¥–∫–∏, ' \
               '—Ä–æ–∑–∫–∞–∂–∏ –±—É–¥—å –ª–∞—Å–∫–∞ —â–æ —Å—Ç–∞–ª–æ—Å—å —ñ –º–∏ —Å–ø—Ä–æ–±—É—î–º–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏—Å—å —Ç–∞ —Ä–µ–∞–±—ñ–ª—ñ—Ç—É–≤–∞—Ç–∏—Å—å –ø–µ—Ä–µ–¥ —Ç–æ–±–æ—é'
        b.send(text=text)

        b.complain = True
        b.booking = False
        b.mode = 2
        b.menu_level = 3
        text = '–ö–æ–ª–∏ —Ç–∏ –≤ –Ω–∞—Å –±—É–≤?\n–û–±–µ—Ä–∏ –Ω–∞–π–±–ª–∏–∂—á—É –¥–∞—Ç—É, –∞–±–æ –Ω–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ "21.08.2022"?'
        b.send(text=text, markup=True)
    elif button_data == '–ê–∫—Ü—ñ—ó':
        b.menu_level = 3
        b.send(text=b.get_hookah_attr('–ê–∫—Ü–∏–∏'), markup=True)
    elif button_data == 'wi-fi':
        b.menu_level = 3
        b.send(text=b.get_hookah_attr('–ü–∞—Ä–æ–ª—å'), markup=True)
    elif button_data == '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ':
        b.booking_approval(finaly=True)
    elif button_data == 'Spam':
        b.send(text='Hello, admin!\n–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏')
        b.spam = True
    elif button_data == 'Spam_yes':
        try:
            # users = b.context.user_data['users'].users_list
            s, er = bu.create_session()
            users_list = User.get_users_list(s)
        except KeyError or AttributeError:
            b.send("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏")
            return
        b.menu_level = 3
        booking_hookah_number = '2'
        button1 = InlineKeyboardButton(text='‚è∞ –°—Ç–æ–ª–∏–∫', callback_data='–ó–∞–±—É–∫–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫' + booking_hookah_number)
        button2 = InlineKeyboardButton(text='–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='–í—Å—ñ –∑–∞–∫–ª–∞–¥–∏')
        markup = InlineKeyboardMarkup([[button1, button2]])
        file_name = 'pict.jpg'
        photo = r'Data' '\\' + file_name
        if not os.path.isfile(photo):
            b.send(text=f'–§–∞–π–ª —Ñ–æ—Ç–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {photo}')
            return
        for u in users_list:
            if str(b.chat_id) != u['chat_id']:
                try:
                    message_id = context.bot.send_photo(u.id, photo=open(photo, 'rb'), timeout=30).message_id
                    b.add_message(message_id)
                    message_id = context.bot.send_message(u.id, text=b.spam_text, reply_markup=markup).\
                        message_id
                    b.add_message(message_id)
                    b.send(f"–û—Ç–ø—Ä–∞–≤–∫–∞: {u.full_name}")
                except:
                    b.send(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏, –ø—Ä–æ–ø—É—â–µ–Ω: {u.full_name}")
        b.spam = False
        b.spam_text = ''
        b.menu_level = 0
        b.greating()
    if button_data == 'Spam_no':
        b.spam = False
        b.spam_text = ''
        b.menu_level = 0
        b.greating()


def get_answer_from_user(update, context):
    try:
        get_text = update.message.text
    except AttributeError:
        return
    try:
        b = context.user_data['bot']
    except KeyError:
        b = ChatBot(update, context)
        context.user_data['bot'] = b

    if b.spam:
        b.spam_text = get_text

        button1 = InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data='Spam_yes')
        button2 = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='Spam_no')
        markup = InlineKeyboardMarkup([[button1, button2]])
        text = '–ö–æ–Ω—Ç—Ä–æ–ª—å —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n' + get_text
        b.add_message(context.bot.send_message(b.chat_id, text=text, reply_markup=markup).message_id)

    if b.mode == 1:
        b.user_name = get_text
        b.menu_level = 3
        b.mode = 2
        text = '–ù–∞ —è–∫—É –¥–∞—Ç—É –ø–æ—Ç—Ä—ñ–±–µ–Ω —Å—Ç–æ–ª–∏–∫?'
        b.send(text=text, markup=True)
    elif b.mode == 2:
        b.set_date(get_text)
        b.get_time()
    elif b.mode == 4 and b.booking:  # –∫–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π
        n = 0
        if get_text.isdecimal():
            try:
                n = int(get_text)
            except ValueError or TypeError:
                b.send(text='–ù–µ–≤—ñ—Ä–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è. –í–≤–µ–¥—ñ—Ç–µ —á–∏—Å–ª–æ.')
        b.qnty = n

        b.mode = 5
        b.send(text='–ó–∞–ª–∏—à —Å–≤—ñ–π –º–æ–±—ñ–ª—å–Ω–∏–π, —â–æ–± –º–∏ –º–æ–≥–ª–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è', markup=True)
    elif b.mode == 4 and b.complain:
        b.complain_text = get_text
        b.mode = 5
        b.send(text='–ó–∞–ª–∏—à —Å–≤—ñ–π –º–æ–±—ñ–ª—å–Ω–∏–π, —â–æ–± –º–∏ –º–æ–≥–ª–∏ –∑–≤ º—è–∑–∞—Ç–∏—Å—å –∑ —Ç–æ–±–æ—é –≤ —Ä–∞–∑—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ', markup=True)
    elif b.mode == 5:
        if get_text == "–ó–∞–ª–∏—à–∏—Ç–∏—Å—å –∞–Ω–æ–Ω—ñ–º–æ–º":
            text = '–î—è–∫—É—é —â–æ –Ω–µ –º–æ–≤—á–∏—à, –∑–∞–≤–¥—è–∫–∏ —Ç–æ–±—ñ –º–∏ —Å–ø—Ä–æ–±—É—î–º–æ —Å—Ç–∞—Ç–∏ —Å–∏–ª—å–Ω—ñ—à–µ üí™'
            b.menu_level = 2
            b.mode = 0
            b.send(text=text, markup=True)
            b.notify_about_event()


def start(update, context):
    user = update.effective_user
    bot_user = bu.BotUser(user.id)
    if bot_user.user is None:
        d = {"id": user.id,
             "is_bot": user.is_bot,
             "language_code": user.language_code,
             "is_premium": user.is_premium,
             "first_name": user.first_name,
             "last_name": user.last_name,
             "full_name": user.full_name,
             "username": user.username}
        bot_user.create(d)
    else:
        bot_user.last()
    b = ChatBot(update, context)
    # b.users.write_file()
    context.user_data['bot'] = b
    context.user_data['bot_user'] = bot_user
    log = Log(b)
    log.set(context, action_type=0, action='start')
    b.greating()


def get_contact(update, context):
    try:
        b = context.user_data['bot']
    except KeyError:
        b = ChatBot(update, context)
        context.user_data['bot'] = b
    num = update.message.contact.phone_number
    bot_user = context.user_data['bot_user']
    bot_user.phone_number(num)
    if num[0] != '+':
        num = '+' + num
    b.phone_number = num
    # b.users.update_phone(b.phone_number)
    b.delete_messages()

    if b.booking:
        b.booking_approval()
    elif b.complain:
        text = '–î—è–∫—É—é —â–æ –Ω–µ –º–æ–≤—á–∏—à, –∑–∞–≤–¥—è–∫–∏ —Ç–æ–±—ñ –º–∏ —Å–ø—Ä–æ–±—É—î–º–æ —Å—Ç–∞—Ç–∏ —Å–∏–ª—å–Ω—ñ—à–µ üí™'
        b.send(text=text)
        b.notify_about_event()


def get_location(update, context):
    b = context.user_data['bot']
    context.user_data['Location'] = update.message.location
    b.send(text=f'–î—è–∫—É—î–º–æ, –ª–æ–∫–∞—Ü—ñ—è –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ —è–∫: {str(update.message.location)}')


def get_file(update, context):
    b = context.user_data['bot']
    if b.chat_id not in b.options['–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤']:
        b.send(text='–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤.')
        return
    file_name = update.message.document.file_name
    if file_name != 'options.json' and file_name != '–∑–∞–≤–µ–¥–µ–Ω–∏—è.json':
        b.send(text='–ù–µ –≤–µ—Ä–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞.')
        return
    try:
        with open(r'Data' '\\' + file_name, 'wb') as f:
            context.bot.get_file(update.message.document).download(out=f)
    except Exception as excep:
        context.bot.reply_to(update.message, excep)
# endregion


# region –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å - –∑–∞–ø—É—Å–∫


updater = Updater(my_token)
dp = updater.dispatcher

dp.add_handler(CommandHandler("start", start))
dp.add_handler(MessageHandler(filters=Filters.text, callback=get_answer_from_user))
dp.add_handler(MessageHandler(filters=Filters.contact, callback=get_contact))
dp.add_handler(MessageHandler(filters=Filters.location, callback=get_location))
dp.add_handler(MessageHandler(filters=Filters.document, callback=get_file))
dp.add_handler(InlineQueryHandler(inlineKeyboard, pass_update_queue=True, pass_job_queue=True, pass_user_data=True))
dp.add_handler(CallbackQueryHandler(inlineKeyboard))

#  session, er = bu.create_session()

try:
    updater.start_polling()
except telegram.error.NetworkError as e:
    print(f'–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}')
#  endregion
